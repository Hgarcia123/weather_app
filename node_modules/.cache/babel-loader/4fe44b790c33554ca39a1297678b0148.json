{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\henrique.garcia\\\\React JS Projects\\\\weather_app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport WeatherCards from \"./Components/weatherCards\";\nimport { useEffect, useState } from \"react\";\nimport { Oval } from \"react-loader-spinner\";\nimport $ from \"jquery\";\nimport { CountryDropdown, RegionDropdown } from \"react-country-region-selector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [weather, setWeather] = useState({});\n  const [country, setCountry] = useState(\"PT\");\n  const [region, setRegion] = useState(\"Lisboa\");\n  const [time, setTime] = useState(0);\n  const [errorMesg, setErrorMsg] = useState(\"\");\n\n  const fetchWeather = async () => {\n    console.log(country);\n    const res = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${region},${country}&appid=c9f6971381650cd6d35447c475cce567&units=metric`).then(async response => {\n      const data = await response.json();\n\n      if (!response.ok) {\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n    }).catch(error => {\n      setErrorMsg(\"There was an error!\");\n      console.error(\"Error!\", error);\n    }); //\n\n    const data = await res.json();\n    console.log(data);\n    return data;\n  };\n\n  useEffect(() => {\n    const getWeather = async () => {\n      const weatherApi = await fetchWeather();\n      setWeather(weatherApi);\n    };\n\n    getWeather();\n    const interval = setInterval(() => {\n      setTime(time + 1);\n    }, 350000);\n    return () => clearInterval(interval);\n  }, [time, region]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"Title\",\n        children: \"WeatherApp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"SelectRegion\",\n        children: \"Select a region: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CountryDropdown, {\n          valueType: \"short\",\n          value: country,\n          onChange: val => setCountry(val)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RegionDropdown, {\n          countryValueType: \"short\",\n          country: country,\n          value: region,\n          onChange: val => setRegion(val)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: $.isEmptyObject(weather) ? /*#__PURE__*/_jsxDEV(Oval, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(WeatherCards, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"uNqOxFosTFsd+/j1a0lMwgcXuQ8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/henrique.garcia/React JS Projects/weather_app/src/App.js"],"names":["WeatherCards","useEffect","useState","Oval","$","CountryDropdown","RegionDropdown","App","weather","setWeather","country","setCountry","region","setRegion","time","setTime","errorMesg","setErrorMsg","fetchWeather","console","log","res","fetch","then","response","data","json","ok","error","message","statusText","Promise","reject","catch","getWeather","weatherApi","interval","setInterval","clearInterval","val","isEmptyObject"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport WeatherCards from \"./Components/weatherCards\";\nimport { useEffect, useState } from \"react\";\nimport { Oval } from \"react-loader-spinner\";\nimport $ from \"jquery\";\nimport { CountryDropdown, RegionDropdown } from \"react-country-region-selector\";\n\nconst App = () => {\n  const [weather, setWeather] = useState({});\n  const [country, setCountry] = useState(\"PT\");\n  const [region, setRegion] = useState(\"Lisboa\");\n  const [time, setTime] = useState(0);\n  const [errorMesg, setErrorMsg] = useState(\"\");\n\n  const fetchWeather = async () => {\n    console.log(country);\n    const res = await fetch(\n      `http://api.openweathermap.org/data/2.5/forecast?q=${region},${country}&appid=c9f6971381650cd6d35447c475cce567&units=metric`\n    )\n      .then(async (response) => {\n        const data = await response.json();\n\n        if (!response.ok) {\n          const error = (data && data.message) || response.statusText;\n          return Promise.reject(error);\n        }\n      })\n      .catch((error) => {\n        setErrorMsg(\"There was an error!\");\n        console.error(\"Error!\", error);\n      });\n    //\n\n    const data = await res.json();\n    console.log(data);\n    return data;\n  };\n\n  useEffect(() => {\n    const getWeather = async () => {\n      const weatherApi = await fetchWeather();\n      setWeather(weatherApi);\n    };\n    getWeather();\n\n    const interval = setInterval(() => {\n      setTime(time + 1);\n    }, 350000);\n    return () => clearInterval(interval);\n  }, [time, region]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1 className=\"Title\">WeatherApp</h1>\n        <h2 className=\"SelectRegion\">Select a region: </h2>\n        <div>\n          <CountryDropdown\n            valueType=\"short\"\n            value={country}\n            onChange={(val) => setCountry(val)}\n          />\n          <RegionDropdown\n            countryValueType=\"short\"\n            country={country}\n            value={region}\n            onChange={(val) => setRegion(val)}\n          />\n        </div>\n      </header>\n      <div>\n        {$.isEmptyObject(weather) ? (\n          <Oval></Oval>\n        ) : (\n          <WeatherCards weather={weather} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}